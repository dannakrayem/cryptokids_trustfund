//SPDX-License-Identifier: MIT

contract Cryptokid
{
    address public owner;

    error OnlyOwner();
    error ValidAddress();

    event Deposit(address sender, uint amount, uint time);
    event Withdrawal(address receiver, uint amount, uint time);

    struct Kid //defines kids
    {
        address payable walletAddress;
        string firstName;
        string lastName;
        //can't cash out until 18 years old
        uint releaseDate1;
        uint amount;
        bool withdrawn;
    }

    Kid[] public kids;

    constructor ()
    {
    owner = msg.sender;
    }

    modifier onlyOwner
    {
        if(msg.sender != owner)
        {
            revert OnlyOwner();
        }
        _;
    }

    modifier validAddress(address _walletAddress)
    {
        if(_walletAddress == address(0))
        {
            revert ValidAddress();
        }
        _;
    }

    function addKid(address payable _walletAddress, string memory _firstName, string memory _lastname)
    public onlyOwner validAddress(_walletAddress)
    {
        require(_walletAddress != owner,"Owner cannot be a child!");

        for (uint i; i < kids.length; i++)
        {
            require(kids[i].walletAddress != _walletAddress, "Address is already in kids array");
        }

        bytes32 firstNameHash = keccak256(abi.encodePacked(_firstName));
        bytes32 lastNameHash = keccak256(abi.encodePacked(_lastname));
        bytes32 emptyStringHash = keccak256(abi.encodePacked(""));

        require(firstNameHash != emptyStringHash, "first name cannot be empty");
        require(lastNameHash != emptyStringHash, "last name cannot be empty");

        Kid memory kid;
        kid.walletAddress = _walletAddress;
        kid.firstName = _firstName;
        kid.lastName = _lastname;
        //release date in 16 years
        //block.timestamp is prensent time
        kid.releaseDate1 = block.timestamp + (16 * (365 * 1 days));
        kids.push(kid);
    }

    function getIndex(address _walletAddress) private view returns (uint)
    {
        for(uint i; i < kids.length; i++)
        {
            if(kids[i].walletAddress == _walletAddress)
            {
                return i;
            }
        }
        return 409;
    }

    function deposit(address _walletAddress) payable public validAddress(_walletAddress)
    {
        require (_walletAddress != owner, "owner cannot be a child");
        require(msg.value > 0, "insufficient balance");
        uint i = getIndex(_walletAddress);
        require(kids[i].walletAddress == _walletAddress, "Address is not in kids array");
        kids[i].amount += msg.value;
        emit Deposit(msg.sender, msg.value, block.timestamp);
    }

    function balance() public view returns(uint)
    {
        uint i = getIndex(msg.sender);
        if(msg.sender != kids[i].walletAddress)
        {
            revert ValidAddress();
        }
    }

    function withdraw (address payable _walletAddress) public payable validAddress(_walletAddress)
    {
        uint i = getIndex(_walletAddress);
        require(kids[i].amount > 0, "insufficient balance");
        require(msg.sender == kids[i].walletAddress, "only owner of the account");
        require(block.timestamp > kids[i].releaseDate1, "wait for release date");
        require(!kids[i].withdrawn, "funds have already been withdrawn");

        kids[i].amount -= kids[i].amount;
        _walletAddress.transfer(kids[i].amount);
        kids[i].withdrawn = true;
        emit Withdrawal(msg.sender, kids[i].amount, block.timestamp);
    }
}
